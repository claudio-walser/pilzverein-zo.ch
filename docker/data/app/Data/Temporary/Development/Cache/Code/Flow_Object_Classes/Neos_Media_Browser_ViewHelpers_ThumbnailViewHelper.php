<?php 
namespace Neos\Media\Browser\ViewHelpers;

/*
 * This file is part of the Neos.Media.Browser package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Media\Domain\Model\AssetSource\AssetProxy\AssetProxyInterface;
use Neos\FluidAdaptor\Core\ViewHelper\AbstractTagBasedViewHelper;

/**
 * Renders an <img> HTML tag from a given Asset Proxy instance
 *
 * This view helper is INTERNAL for now, and only used in the Media Browser.
 * The functionality of this view helper might become part of the Neos.Media
 * thumbnail view helper if there is a demand for it.
 *
 * = Examples =
 *
 * <code title="Rendering an asset proxy thumbnail">
 * <mediaBrowser:thumbnail assetProxy="{assetProxyObject}" alt="a sample asset" />
 * </code>
 * <output>
 * <img src="https://my-asset-management.com/thumbnails/espresso.jpg" width="120" height="180" alt="a sample asset without scaling" />
 * </output>
 */
class ThumbnailViewHelper_Original extends AbstractTagBasedViewHelper
{
    /**
     * name of the tag to be created by this view helper
     *
     * @var string
     */
    protected $tagName = 'img';

    /**
     * @return void
     */
    public function initializeArguments()
    {
        parent::initializeArguments();
        $this->registerUniversalTagAttributes();
        $this->registerTagAttribute('alt', 'string', 'Specifies an alternate text for an asset', true);
    }

    /**
     * Renders an HTML img tag with a thumbnail or preview image, created from a given asset proxy.
     *
     * @param AssetProxyInterface $assetProxy The asset to be rendered as a thumbnail
     * @param integer $width Desired width of the thumbnail
     * @param integer $height Desired height of the thumbnail
     * @return string an <img...> html tag
     */
    public function render(AssetProxyInterface $assetProxy = null, $width = null, $height = null)
    {
        if ($width === null || $height === null) {
            $width = 250;
            $height = 250;
        }

        if ($width <= 250 && $height <= 250) {
            $thumbnailUri = $assetProxy->getThumbnailUri();
        } else {
            $thumbnailUri = $assetProxy->getPreviewUri();
        }

        $this->tag->addAttributes([
            'width' => $width,
            'height' => $height,
            'src' => $thumbnailUri
        ]);

        return $this->tag->render();
    }
}

#
# Start of Flow generated Proxy code
#
namespace Neos\Media\Browser\ViewHelpers;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * Renders an <img> HTML tag from a given Asset Proxy instance
 * 
 * This view helper is INTERNAL for now, and only used in the Media Browser.
 * The functionality of this view helper might become part of the Neos.Media
 * thumbnail view helper if there is a demand for it.
 * 
 * = Examples =
 * 
 * <code title="Rendering an asset proxy thumbnail">
 * <mediaBrowser:thumbnail assetProxy="{assetProxyObject}" alt="a sample asset" />
 * </code>
 * <output>
 * <img src="https://my-asset-management.com/thumbnails/espresso.jpg" width="120" height="180" alt="a sample asset without scaling" />
 * </output>
 */
class ThumbnailViewHelper extends ThumbnailViewHelper_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        parent::__construct();
        if ('Neos\Media\Browser\ViewHelpers\ThumbnailViewHelper' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'tagName' => 'string',
  'escapeOutput' => 'boolean',
  'tag' => 'TYPO3Fluid\\Fluid\\Core\\ViewHelper\\TagBuilder',
  'controllerContext' => 'Neos\\Flow\\Mvc\\Controller\\ControllerContext',
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
  'systemLogger' => 'Neos\\Flow\\Log\\SystemLoggerInterface',
  'logger' => 'Psr\\Log\\LoggerInterface',
  'argumentDefinitions' => 'array<TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ArgumentDefinition>',
  'viewHelperNode' => 'TYPO3Fluid\\Fluid\\Core\\Parser\\SyntaxTree\\ViewHelperNode',
  'arguments' => 'array',
  'childNodes' => 'NodeInterface[] array',
  'templateVariableContainer' => 'TYPO3Fluid\\Fluid\\Core\\Variables\\VariableProviderInterface',
  'renderingContext' => 'TYPO3Fluid\\Fluid\\Core\\Rendering\\RenderingContextInterface',
  'renderChildrenClosure' => '\\Closure',
  'viewHelperVariableContainer' => 'TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperVariableContainer',
  'escapeChildren' => 'boolean',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectTagBuilder(new \TYPO3Fluid\Fluid\Core\ViewHelper\TagBuilder());
        $this->injectObjectManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface'));
        $this->injectSystemLogger(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Log\SystemLoggerInterface'));
        $this->injectLogger(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Psr\Log\LoggerInterface'));
        $this->Flow_Injected_Properties = array (
  0 => 'tagBuilder',
  1 => 'objectManager',
  2 => 'systemLogger',
  3 => 'logger',
);
    }
}
# PathAndFilename: /var/www/html/neos/Packages/Application/Neos.Media.Browser/Classes/ViewHelpers/ThumbnailViewHelper.php
#